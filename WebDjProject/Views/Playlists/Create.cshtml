@model WebDjProject.Models.Playlist

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Playlist</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.playlistName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.playlistName, new { htmlAttributes = new { @class = "form-control", @id = "nameInput" } })
                @Html.ValidationMessageFor(model => model.playlistName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="createPlaylist" type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
    @Html.HiddenFor(model => model.spotifyPlaylistID, new { id = "hiddenPlaylistID" })
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    // Get the hash of the url
    const hash = window.location.hash
        .substring(1)
        .split('&')
        .reduce(function (initial, item) {
            if (item) {
                var parts = item.split('=');
                initial[parts[0]] = decodeURIComponent(parts[1]);
            }
            return initial;
        }, {});
    window.location.hash = '';

    // Set token
    let _token = hash.access_token;

    const authEndpoint = 'https://accounts.spotify.com/authorize';
    const refreshEndpoint = 'https://accounts.spotify.com/api/token'

    // Replace with your app's client ID, redirect URI and desired scopes
    const clientId = 'ddb6bd84d33c42aba1450a177ca0f23e';
    const redirectUri = 'http://localhost:53881/Playlists/Create/';
    const clientSecret = 'd2e2b989c762414c88b6c3121dd44a65';

    const scopes = [
        'playlist-read-private',
        'user-modify-playback-state',
        'user-read-recently-played',
        'user-read-currently-playing',
        'playlist-modify-private',
        'app-remote-control',
        'playlist-modify-public',
        'user-read-birthdate',
        'user-read-playback-state',
        'user-read-email',
        'streaming',
        'user-read-private',
        'user-top-read',
        'app-remote-control'
    ];

    // If there is no token, redirect to Spotify authorization
    if (!_token) {
        window.location = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=false`;
    }
    

    var createPlaylistBtn = document.getElementById("createPlaylist");
    if (createPlaylistBtn.addEventListener)
        createPlaylistBtn.addEventListener("click", createPlaylist, false);
    else if (createPlaylistBtn.attachEvent)
        createPlaylistBtn.attachEvent('onclick', createPlaylist);

    function createPlaylist() {
        var inputedName = document.getElementById("nameInput").form[1].value;
        spotifyMakeEmptyPlaylist(inputedName)
    }

    function spotifyMakeEmptyPlaylist(playlistName) {
        var myData = JSON.stringify({ name: playlistName, public: true });

        $.ajax({
            url: 'https://api.spotify.com/v1/me/playlists',
            method: "POST",
            async: false,
            headers: {
                'Authorization': 'Bearer ' + _token,
                'Content-Type': 'application/json'
            },
            data: myData,
            success: function (response) {
                playlistId = response.id;
                document.getElementById("hiddenPlaylistID").value = playlistId
            },
            error: function (response) {
            }
        });
    }
</script>

