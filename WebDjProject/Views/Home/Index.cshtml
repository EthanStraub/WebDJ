<!DOCTYPE html>
@{
    ViewBag.Title = "Home Page";
}

<!--<h1>
    <strong>@ViewBag.Name</strong>'s Profile Image ..

    <img src="@Url.Action("UserPhotos", "Home" )" style="width:160px;height:160px; background: #FFFFFF;
    margin: auto;
    -moz-border-radius: 60px;
    border-radius: 100px;
    padding: 6px;
    box-shadow: 0px 0px 20px #888;" />
</h1>-->

<!-- SDK testing grounds -->
<html>

<head>
    <title>Spotify Web Playback SDK Template</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
            integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
            crossorigin="anonymous"></script>

    <!-- Include the Web Playback SDK -->
    <script src="https://sdk.scdn.co/spotify-player.js"></script>

</head>

<body class="container">
    <h1 class="text-salmon">Spotify Web Playback SDK Template</h1>
    <h4>This app uses the implicit grant authorization flow to get an access token and initialise the Web Playback SDK. It then uses the Spotify Connect Web API to play a song.</h4>
    <p>If everything is set up properly, you should hear some music!</p>
    <img id="current-track" />
    <h3 id="current-track-name"></h3>

    <input id="toggle" type="button" value="Play/Pause"/>

</body>

    
</html>

<script>
    // Get the hash of the url
    const hash = window.location.hash
        .substring(1)
        .split('&')
        .reduce(function (initial, item) {
            if (item) {
                var parts = item.split('=');
                initial[parts[0]] = decodeURIComponent(parts[1]);
            }
            return initial;
        }, {});
    window.location.hash = '';

    // Set token
    let _token = hash.access_token;

    const authEndpoint = 'https://accounts.spotify.com/authorize';

    // Replace with your app's client ID, redirect URI and desired scopes
    const clientId = 'ddb6bd84d33c42aba1450a177ca0f23e';
    const redirectUri = 'http://localhost:53881/Home/Index/';
    const scopes = [
        'streaming',
        'user-read-birthdate',
        'user-read-private',
        'user-modify-playback-state'
    ];

    // If there is no token, redirect to Spotify authorization
    if (!_token) {
        window.location = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;
    }

    // Set up the Web Playback SDK

    window.onSpotifyPlayerAPIReady = () => {
        const player = new Spotify.Player({
            name: 'Web Playback SDK Template',
            getOAuthToken: cb => { cb(_token); }
        });

        // Error handling
        player.on('initialization_error', e => console.error(e));
        player.on('authentication_error', e => console.error(e));
        player.on('account_error', e => console.error(e));
        player.on('playback_error', e => console.error(e));

        // Playback status updates
        player.on('player_state_changed', state => {
            console.log(state)
            $('#current-track').attr('src', state.track_window.current_track.album.images[0].url);
            $('#current-track-name').text(state.track_window.current_track.name);
        });

        // Ready
        player.on('ready', data => {
            console.log('Ready with Device ID', data.device_id);

            // Play a track using our new device ID
            play(data.device_id);
        });

        // Connect to the player!
        player.connect();

        var el = document.getElementById("toggle");
        if (el.addEventListener)
            el.addEventListener("click", toggle, false);
        else if (el.attachEvent)
            el.attachEvent('onclick', toggle);

        function toggle() {
            player.togglePlay().then(() => {
                console.log('Toggled playback!');
            });
        }
    }

    // Play a specified track on the Web Playback SDK's device ID
    function play(device_id) {
        $.ajax({
            url: "https://api.spotify.com/v1/me/player/play?device_id=" + device_id,
            type: "PUT",
            data: '{"uris": ["spotify:track:4YLXjoYmRGIXstTLtloHf2"]}',
            beforeSend: function (xhr) { xhr.setRequestHeader('Authorization', 'Bearer ' + _token); },
            success: function (data) {
                console.log(data)
            }
        });
    }

    

</script>