@model IEnumerable<WebDjProject.Models.Playlist>

@{
    ViewBag.Title = "Search";
}

<h2>Get a recommendation</h2>
<br />
<h4>Here are some songs we think you might like.</h4>
<p id="playlistSpace"></p>

<script src="~/Scripts/jquery-3.3.1.js"></script>
<script type="text/javascript">

    @if(User.IsInRole("PremiumUser")==false)
    {
    <text>
    window.location.href = "http://localhost:53881/Home";
    </text>
    }


    // Get the hash of the url
    const hash = window.location.hash
        .substring(1)
        .split('&')
        .reduce(function (initial, item) {
            if (item) {
                var parts = item.split('=');
                initial[parts[0]] = decodeURIComponent(parts[1]);
            }
            return initial;
        }, {});
    window.location.hash = '';

    // Set token
    let _token = hash.access_token;

    const authEndpoint = 'https://accounts.spotify.com/authorize';
    const refreshEndpoint = 'https://accounts.spotify.com/api/token'

    // Replace with your app's client ID, redirect URI and desired scopes
    const clientId = 'ddb6bd84d33c42aba1450a177ca0f23e';
    const redirectUri = 'http://localhost:53881/Home/Recommendation/';
    const clientSecret = 'd2e2b989c762414c88b6c3121dd44a65';

    const scopes = [
        'playlist-read-private',
        'user-modify-playback-state',
        'user-read-recently-played',
        'user-read-currently-playing',
        'playlist-modify-private',
        'app-remote-control',
        'playlist-modify-public',
        'user-read-birthdate',
        'user-read-playback-state',
        'user-read-email',
        'streaming',
        'user-read-private',
        'user-top-read',
        'app-remote-control'
    ];

    // If there is no token, redirect to Spotify authorization
    if (!_token) {
        window.location = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=false`;
    }

    function createRecommendedPlaylist() {
        var allTracks = [];
        var allPlaylists = [];
        var allTracksString;
        var recommendedTrackIDs = [];
        var recommendedTracks = [];
        var formattedTrackIDs = [];
        
        if (_token) {

            var recommendedPlaylistId = spotifyMakeEmptyPlaylist("Recommended songs");

            @foreach (var item in Model)
            {
            <text>
                allPlaylists.push(getSongs('@item.spotifyPlaylistID', _token))
            </text>
            }

            

            for (c = 0; c < allPlaylists.length; c++) {
                var randomTrack = Math.floor(Math.random() * allPlaylists[c].length)
                allTracks.push(allPlaylists[c][randomTrack]);
            }

            allTracksString = allTracks.join(",")
            //console.log(allTracksString);

            recommendedTracks = spotifyGetRecommendations(allTracksString, _token);


            for (d = 0; d < 20; d++) {
                recommendedTrackIDs.push(recommendedTracks[0].tracks[d].id);
            }

            formattedTrackIDs = recommendedTrackIDs.join(',spotify:track:');
            spotifyAddTracksToRecommendedPlaylist(formattedTrackIDs, recommendedPlaylistId);

            var playlistSpace = document.getElementById("playlistSpace");
            playlistSpace.innerHTML = '<iframe src="https://open.spotify.com/embed/playlist/' + recommendedPlaylistId + '" width="600" height="400" frameborder="2" allowtransparency="true" allow="encrypted-media"></iframe>';
            

        }
    }

    function spotifyGetRecommendations(tracks, authToken) {
        var recommendedTracks = [];
        $.ajax({
            url: 'https://api.spotify.com/v1/recommendations?limit=20&market=US&seed_tracks=' + tracks,
            method: "GET",
            async: false,
            headers: {
                'Authorization': 'Bearer ' + authToken,
            },
            success: function (response) {
                recommendedTracks.push(response)
            },
            error: function (response) {
                //console.log(response);
            }
        });
        return recommendedTracks
    }

    function getSongs(playlistId, authToken) {
        var id = playlistId;

        var trackIDList = [];
        $.ajax({
            url: 'https://api.spotify.com/v1/playlists/' + id + '/tracks',
            method: "GET",
            async: false,
            headers: {
                'Authorization': 'Bearer ' + authToken,
                'Content-Type': 'application/json'
            },
            success: function (response) {
                for (k = 0; k < response.items.length; k++) {
                    trackIDList.push(response.items[k].track.id);
                }
            },
            error: function (response) {
                
            }
        });
        return trackIDList;
    }

    function spotifyMakeEmptyPlaylist(playlistName) {
        var myData = JSON.stringify({ name: playlistName, public: true });
        var newPlaylistId;
        $.ajax({
            url: 'https://api.spotify.com/v1/me/playlists',
            method: "POST",
            async: false,
            headers: {
                'Authorization': 'Bearer ' + _token,
                'Content-Type': 'application/json'
            },
            data: myData,
            success: function (response) {
                console.log(response);

                newPlaylistId = response.id;
            },
            error: function (response) {
                console.log(response);
                console.log("ERROR");
            }
        });
        return newPlaylistId;
    }

    //ADDING TRACKS
    function spotifyAddTracksToRecommendedPlaylist(tracks, playlistId) {
        $.ajax({
            url: 'https://api.spotify.com/v1/playlists/' + playlistId + '/tracks?uris=spotify:track:' + tracks,
            method: "POST",
            async: false,
            headers: {
                'Authorization': 'Bearer ' + _token,
                'Content-Type': 'application/json'
            },
            success: function (response) {
                //console.log(response);
            },
            error: function (response) {
                //console.log(response);
                //console.log("ERROR");
            }
        });
    }

    createRecommendedPlaylist();

</script>